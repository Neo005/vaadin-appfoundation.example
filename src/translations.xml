<tmx version="1.4">
	<body>
		<tu tuid="auth module">
			<tuv lang="en">
				<seg>Authentication</seg>
			</tuv>
		</tu>
		<tu tuid="auth intro">
			<tuv lang="en">
				<seg>Introduction to the Authentication module</seg>
			</tuv>
		</tu>
		<tu tuid="auth a user">
			<tuv lang="en">
				<seg>Authenticating users</seg>
			</tuv>
		</tu>
		<tu tuid="intro text to auth module">
			<tuv lang="en">
				<seg>=Introduction to the Authentication module=
				Unlike the module name suggests, this module is not just about authentication. Additionally to authentication, 
				the authentication module provides your application user session management, password handling utility methods and
				features for handling user accounts.
				
				==Security==
				The authentication module has several inbuilt security features, such as
				
				 * User's passwords are always stored in hashed format
				 * Protection against brute force attacks by locking accounts after a number of failed login attempts
				 * Protection against brute force attacks by logging out the user if the current password is incorrect too many times 
				 in a row when change the user's password
				 
				 ==Dependencies==
				 This module depends on the [[#persistence|persistence module]].
				</seg>
			</tuv>
		</tu>
		<tu tuid="text for auth a user">
			<tuv lang="en">
				<seg>=Authenticating users=
				The authentication module provides a simple interface for authenticating users. Authenticating a user can be done
				with one simple method call. The authentication is simply done by calling the static 
				{{{AuthenticationUtil.authenticate()}}} method. The method takes as input two string parameters, a username and
				a password. If a user is found with the given username and password, then the user's {{{User}}} object is
				returned. If there no user exists with the given username **or** if the password is incorrect, then a 
				{{{InvalidCredentialsException}}} is thrown. 
				
				The {{{InvalidCredentialsException}}} will **not** tell you whether it was the username that was not found or
				if it was the password that was incorrect. This is by design, just to make sure that your application will
				not accidentally become vulnerable to account enumeration attacks.
				
				The {{{authenticate()}}} method can also throw an {{{AccountLockedException}}}. This exception is thrown if the
				user account has been locked. When an account is locked, the Authentication module forbids a user from logging
				in with that specific user, even if the provided credentials would be correct. An account can become locked
				if a user attempts to log in with a wrong password too many times in a row.
				
				Below is shown an example of how to implement a login screen which uses the {{{authenticate()}}} method for
				authenticating the user. The example locks the user account after three failed login attempts (incorrect passwords).
				The example is reseted when this view is reopened.
				</seg>
			</tuv>
		</tu>
		<tu tuid="show code">
			<tuv lang="en">
				<seg>Show code example</seg>
			</tuv>
		</tu>
		<tu tuid="configuring auth">
			<tuv lang="en">
				<seg>Configuring the module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring auth text">
			<tuv lang="en">
				<seg>=Configuring the authentication module=
				==Prerequisites==
				The authentication module depends on the [[#persistence|persistence module]] so make sure you have it
				configured as well. Also, make sure you have the org.vaadin.appfoundation.authentication.data.User class defined
				in your persistence.xml file according to the persistence module's descriptions.
				
				==Setting up the authentication module==
				It is really easy to get started with the authentication module. The only thing that needs to be done, is to
				initialize [[sessionhandler|SessionHandler]] class. It is encouraged that the initialization of the 
				{{{SessionHandler}}} is done in the application's {{{init()}}} method. See the code example of the initialization
				process at the end of this page.
				
				The authentication module provides you with a variation of different configuration parameters which can be defined. 
				All configuration parameters are defined using java system properties. The following properties are available for
				the authentication module: 
				
				===Salt value for password hash===
				Before any passwords are stored in the database, they are encrypted with a one-way algorithm (a hash). The salt value
				is a random string which is concatenated with a user's password before the password is hashed. The resulting hash 
				value will be harder to break with brute force attacks compared to a hash without a salt value. 
				
				Note that once the salt value has been defined, it cannot be changed (- technically, it can be changed, but then it 
				would invalidate all existing passwords). It is recommended that you choose a salt value and stick to it. A good
				place to define the salt value is in your application's ContextListener (see example at the end of the page).
				
				The system property key for the password salt is authentication.password.salt 
				
				===Minimum length for a password===
				You can define a minimum length users' passwords. The authentication module will not allow the user to pick a password
				which is shorter than the defined minimum length.
				
				The system property key for the minimum password length is authentication.password.validation.length and the value
				should be given as an integer.
				
				===Password policies===
				The authentication module provides you with a set of predefined password policies which can be enabled or disabled.
				You can define that the password must contain
				
				* Lower case letters (a-z)
				* Upper case letters (A-Z)
				* Numbers (0-9)
				* Special characters (any character which is none of the above)
				
				The system property keys for the policies are as follows:
				
				* authentication.password.validation.lowerCaseRequired
				* authentication.password.validation.upperCaseRequired
				* authentication.password.validation.numericRequired
				* authentication.password.validation.specialCharacterRequired
				
				Each of the properties take a boolean as their value. True means that the policy is being applied on the passwords
				and any passwords which do not fulfill the requirements will not be accepted by the authentication module. The
				policy will be ignored if the property has a value of false.
				
				===Brute-force protection===
				AppFoundation has inbuilt protection against brute-force attacks. This is accomplished by locking an account after
				a number of failed login attempts. By default, five successive failed login attempts are required for the account
				to be locked. You can change the limit with the authentication.maxFailedLoginAttempts parameter. Note that the 
				parameter defines how many failed login attempts are allow, so if you set the value three, it means that the
				account will be locked after the *fourth* successive failed login attempt.
				</seg>
			</tuv>
		</tu>
		<tu tuid="example for auth context listener">
			<tuv lang="en">
				<seg>Example code for the ContextListener used for defining authentication module's settings</seg>
			</tuv>
		</tu>
		<tu tuid="auth module init example">
			<tuv lang="en">
				<seg>Example for initializing the SessionHandler</seg>
			</tuv>
		</tu>
		<tu tuid="getting user instance caption">
			<tuv lang="en">
				<seg>Get active user object</seg>
			</tuv>
		</tu>
		<tu tuid="getting user instance">
			<tuv lang="en">
				<seg>=Getting the user instance for the logged in user=
				An application will occasionally need to know which user is currently logged in for the active application instance.
				Once your application has authenticated the user using the {{{AuthenticationUtil.authenticate()}}} method, the active 
				{{{User}}} object will be stored in the application instance. The {{{SessionHandler}}} class provides a simple and 
				static way to fetch the logged in user's {{{User}}} object. This is simply done by calling the {{{SessionHandler.get()}}}
				method. If the user is not logged in, then null will be returned.
				</seg>
			</tuv>
		</tu>
		<tu tuid="logging out a user caption">
			<tuv lang="en">
				<seg>Logout process and its events</seg>
			</tuv>
		</tu>
		<tu tuid="logging out a user">
			<tuv lang="en">
				<seg>=Logging out a user and logout events=
				If your applications allows users to log in, then your application probably allows your users to log out as well. 
				Logging out a user means that the reference between a {{{User}}} object and an application instance is removed. Thus,
				the application no longer is aware of the previously inlogged user.
				
				You can log out a user anywhere in your application, simply by calling {{{SessionHandler.logout()}}}. This will
				remove the {{{User}}} object reference and dispatch a logout event to any possible listeners. The logout method itself
				will not affect your application's state in any way. Your application most likely will want to do some actions when
				the user logs out, for example, remove all views visible and show a login screen to the user. This problem can be
				solved by registering your application as a LogoutEventListener. Once an event has been dispatched, you will know
				that the user has logged out and you can perform any actions necessary. See code example below.
				</seg>
			</tuv>
		</tu>
		<tu tuid="logout example">
			<tuv lang="en">
				<seg>Example of logging out a user</seg>
			</tuv>
		</tu>
		<tu tuid="logout event example">
			<tuv lang="en">
				<seg>Example of logout events</seg>
			</tuv>
		</tu>
		<tu tuid="change password">
			<tuv lang="en">
				<seg>Changing user passwords</seg>
			</tuv>
		</tu>
		<tu tuid="register user">
			<tuv lang="en">
				<seg>Registering new users</seg>
			</tuv>
		</tu>
		<tu tuid="fetching users">
			<tuv lang="en">
				<seg>Fetching User object</seg>
			</tuv>
		</tu>
		<tu tuid="storing users">
			<tuv lang="en">
				<seg>Storing User objects</seg>
			</tuv>
		</tu>
		<tu tuid="password util">
			<tuv lang="en">
				<seg>Password utility methods</seg>
			</tuv>
		</tu>
		<tu tuid="change user password">
			<tuv lang="en">
				<seg>=Changing the user's password=
				The authentication module provides with a simple method for changing a user's password - just call
				{{{UserUtil.changePassword()}}}. The method takes four input parameters: the first parameter is the
				{{{User}}} object of the user whose password we are about to change. The second parameter is the
				current password of the user, the third and fourth parameters is the new password and a verification
				for the new password.
				
				Using this utility method will provide you with the following features
				* Verification of old password
				* Verification of new password for typing errors
				* Validation that new password fulfills set requirements such as length, password policies (see 
				[[#auth-config|configuring the authentication module]] for more details)
				* Protection against brute-force attacks (user is automatically logged out if the current password
				is incorrect too many times in a row)
				
				This utility method is designed to be used by the currently inlogged user for him/her to change
				his/her password.  
				
				The example below shows an example of a "change password" form. The current password is "demo123".
			 	The current password's value is reseted back to this value each time you open up this view.
				</seg>
			</tuv>
		</tu>
		<tu tuid="fetching a user object">
			<tuv lang="en">
				<seg>=Fetching a User object=
				The {{{UserUtil}}} class provides with a simple method for fetching an instance of the {{{User}}}
				object with a given ID. This method is simply a wrapper for facade's {{{find()}}} method.
				</seg>
			</tuv>
		</tu>
		<tu tuid="password utility methods">
			<tuv lang="en">
				<seg>=Password utility methods=
				Application Foundation has a utility class for handling passwords. Each of the methods provided by the
				utility class are described below.</seg>
			</tuv>
		</tu>
		<tu tuid="generateHashedPassword">
			<tuv lang="en">
				<seg>==Password hashing==
				Application Foundation never stores passwords in a clear text format in the database. All passwords are
				encrypted with a one-way algorithm (hashed) before they are stored. Before the password is hashed, a
				salt value is concatenated to the password in order to avoid rainbow attacks. The password utility class 
				provides a method for generating correctly hashed passwords. For example, if your user has forgotten his
				password and you need to create him a new one, you will need to create him a new password, hash the
				password and store it in the user object. Code example below shows this process and the usage of
				the password hashing method.				
				</seg>
			</tuv>
		</tu>
		<tu tuid="getMinPasswordLength">
			<tuv lang="en">
				<seg>==Get the minimum length for passwords==
				PasswordUtil's {{{getMinPasswordLength()}}} method returns the currently active minimum length set for
				passwords.
				</seg>
			</tuv>
		</tu>
		<tu tuid="password validators">
			<tuv lang="en">
				<seg>==Password validators==
				As described in the configuration of the authentication module, you can define password policies for
				user passwords. In some cases, you might want to give the user fast feedback on whether the given
				password fullfills the set requirements. The {{{PasswordUtil.getValidators()}}} method returns you
				normal Vaadin validator objects which you can attach to a password field.
				
				The example below show you how to apply the validators to a text field. The example has only a validator
				for a minimum password length. Note that the validator will get triggered after you remove focus from
				the TextField.
				</seg>
			</tuv>
		</tu>
		<tu tuid="password validity">
			<tuv lang="en">
				<seg>==Checing for password validity==
				The {{{PasswordUtil}}} contains a method for checking if a password is valid, in other words, that it
				fulfills all the requirements set in the configuration. To check the validity of a password, simply
				call {{{PasswordUtil.isValid()}}} and give as the parameter the value you want to check</seg>
			</tuv>
		</tu>
		<tu tuid="password verification">
			<tuv lang="en">
				<seg>==Password verification==
				Sometimes there is a need to verify an arbitrary user's password against a given password. Consider an
				application where an administrator can change the password of another user, for example, if the user
				has forgotten his password (note, rather generate random password than use this approach, this is only
				an example!). However, before the administrator can change a user's password, he must provide his own
				password. The code example below demonstrates a method which verifies the administrator's password
				by using the {{{verifyPassword()}}} method in the {{{PasswordUtil}}}.
				</seg>
			</tuv>
		</tu>
		<tu tuid="registering a user">
			<tuv lang="en">
				<seg>=Registering new users=
				The {{{UserUtil}}} contains a method for creating new User objects. The method is called 
				{{{registerUser}}} and as the name suggests, it is designed to be used for user registration
				forms. 
				
				The method takes three input paramters, a username and a password with its respective 
				verification. Using this utility method will provide you with the following features
				* Verification of password for typing errors
				* Validation that new password fulfills set requirements such as length, password policies (see 
				[[#auth-config|configuring the authentication module]] for more details)
				* Verifies username's availability to avoid duplicates
				* Verifies that the username meets the set length requirements
				
				The example below simulates a registration form for new users. The form simulates a situation 
				where the username "demo" is reserved. Note that in this example application, the registered
				users are not actually stored, so the credentials cannot be used in other examples.
				</seg>
			</tuv>
		</tu>
		<tu tuid="storing a user object">
			<tuv lang="en">
				<seg>=Storing a User object=
				The {{{UserUtil}}} class provides with a simple method for storing an instance of the {{{User}}}
				objec. This method is simply a wrapper for facade's {{{store()}}} method.
				</seg>
			</tuv>
		</tu>
		<tu tuid="authorization">
			<tuv lang="en">
				<seg>Authorization</seg>
			</tuv>
		</tu>
		<tu tuid="intro to authorization">
			<tuv lang="en">
				<seg>Introduction to Authorization module</seg>
			</tuv>
		</tu>
		<tu tuid="intro to authorization text">
			<tuv lang="en">
				<seg>=Introduction to the authorization module=
				The authorization module provides a simple role based access control for your application. 
				</seg>
			</tuv>
		</tu>
		<tu tuid="resources">
			<tuv lang="en">
				<seg>Resources</seg>
			</tuv>
		</tu>
		<tu tuid="resources text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="roles">
			<tuv lang="en">
				<seg>Roles</seg>
			</tuv>
		</tu>
		<tu tuid="roles text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="permission managers">
			<tuv lang="en">
				<seg>Permission managers</seg>
			</tuv>
		</tu>
		<tu tuid="permission managers text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="jpapm">
			<tuv lang="en">
				<seg>Persisting permission manager</seg>
			</tuv>
		</tu>
		<tu tuid="jpapm text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="mempm">
			<tuv lang="en">
				<seg>In-memory permission manager</seg>
			</tuv>
		</tu>
		<tu tuid="mempm text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="init authorization">
			<tuv lang="en">
				<seg>Initializing the module</seg>
			</tuv>
		</tu>
		<tu tuid="init authorization text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="granting access">
			<tuv lang="en">
				<seg>Granting access</seg>
			</tuv>
		</tu>
		<tu tuid="granting access text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="denying access">
			<tuv lang="en">
				<seg>Denying access</seg>
			</tuv>
		</tu>
		<tu tuid="denying access text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="checking for access rights">
			<tuv lang="en">
				<seg>Checking for access rights</seg>
			</tuv>
		</tu>
		<tu tuid="checking for access rights text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="removing permissions text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="removing permissions">
			<tuv lang="en">
				<seg>Removing permissions</seg>
			</tuv>
		</tu>
		<tu tuid="i18n">
			<tuv lang="en">
				<seg>Internationalization (i18n)</seg>
			</tuv>
		</tu>
		<tu tuid="i18n intro text">
			<tuv lang="en">
				<seg>=Introduction to the i18n module=
				Often applications need to be written for a multilingual audience. Therefore we must have a way to 
				easily make translations of our applications. Even though you know that your application will not need
				any translation, it is still a good practice to keep the natural language strings away from your 
				application code. The internationalization (i18n) module will help you accomplish that task.

				The i18n module builds on the TMX (Translation Memory eXchange) format, which has become more or less an 
				industry standard for storing translation messages. It is a clear and simple, human readable XML format. 
				If XML is a curse word to you, don't worry, this module will provide you with a tool for creating and 
				maintaining your translation file, just to ease your pain. 
				</seg>
			</tuv>
		</tu>
		<tu tuid="i18n intro">
			<tuv lang="en">
				<seg>Introduction to the i18n module</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file text">
			<tuv lang="en">
				<seg>=Maintaining your translation files=
				It is higly unlikely for you to know all the translations messages that are going to be in your application
				at the point when you start developing your application. Hence, you will most likely want to update your
				translation file with new translation messages. 
				
				AppFoundation provides you with a tool for maintaining your translation files. With the help of the tool,
				you can easily create stubs for new translation messages. The tool is called {{{FillXml}}} and it has exactly
				one method: {{{updateTranslations()}}}.
				
				Let's take a look at the method definition:
				{{{public static void updateTranslations(File file, String[] languages, List&lt;String&gt; identifiers)}}}
				
				The method takes three input parameters: the file instance of your translation file, an array of all the
				languages you wish to have in your translation file and finally an list of all translation unit identifiers
				(tuids).
				
				==Example==
				Let's assume we have the following translations file				
				</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file text2">
			<tuv lang="en">
				<seg>The file contains English translations for the words "username" and "password". Now assume we want to
				add a translation for the phrase "Log in" and additionally add support for another language, for example,
				Finnish. What we can do, is to create a simple application that updates our existing translation file.
				The following code show an example of how this could be done.				
				</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file text3">
			<tuv lang="en">
				<seg>The resulting translation file would look like this:</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file text4">
			<tuv lang="en">
				<seg>Now we have stubs for all the translations and we are ready to replace the TODOs with the actaul 
				translations.
				==Uploading new translations to running application==
				If your application is already running, you might want to load the new translations
				to your application without having to redeploy the application. This can easily be done by calling
				the {{{InternationalizationServlet}}}'s {{{loadTranslations()}}}. The method takes two arguments,
				the first argument is a File instance to your translation file. The second argument is a boolean
				which defines if you wish to override existing translations. This means, that if the servlet already
				has in memory a translation for a word, eg. "username", then the in-memory translation will be
				overridden by the translation found in the translation file. In other words, this way you can update
				existing translations. Obvisouly, if the second parameter is {{{true}}}, then the in-memory translations
				will be overriden and if the parameter is {{{false}}}, then the in-memory translations are kept and
				the overriding translations in the translation file are ignored.</seg>
			</tuv>
		</tu>
		<tu tuid="update trans file code 1 caption">
			<tuv lang="en">
				<seg>Example of an existing translations file</seg>
			</tuv>
		</tu>
		<tu tuid="update trans file code 2 caption">
			<tuv lang="en">
				<seg>Application for updating a translation file</seg>
			</tuv>
		</tu>
		<tu tuid="update trans file code 3 caption">
			<tuv lang="en">
				<seg>The resulting translations file</seg>
			</tuv>
		</tu>
		<tu tuid="update trans file code 4 caption">
			<tuv lang="en">
				<seg>Loading new translations to the i18n servlet</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file">
			<tuv lang="en">
				<seg>Updating the translations file</seg>
			</tuv>
		</tu>
		<tu tuid="translations file text">
			<tuv lang="en">
				<seg>=Translation files=
				The i18n module builds on the TMX (Translation Memory eXchange) format, which has become more or less an 
				industry standard for storing translation messages. All the translation messages in your application are
				located in one or more translation files. There are multiple conventions on deciding how you want to use
				you translation files. In some application, you may want to keep all translation in one single file. Maybe
				you want to keep all the translations for one specific language in one file and the translations for another
				language in another file. Or maybe you want to separate the translations based on application structure, so
				that the translations for one module of your application resides in one translation file and another 
				module's translations are in a separate file.
				
				The stub for a translation file looks like this
				{{{&lt;tmx version="1.4"&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/tmx&gt;
				}}}  
				
				Your translation messages are plain text messages in your translations file(s). Each translation message is 
				called a "translation unit" or "tu". Each unit has a unique identifier, called "tuid". The translation unit 
				consists of a number of translation unit variants ("tuv") where each tuv stands for the translation of a message 
				for a specific language. A simple translation unit in the translation file could look like this
				
				{{{&lt;tu tuid="GENERIC_USERNAME"&gt;
   &lt;tuv lang="en"&gt;
      &lt;seg&gt;Username&lt;/seg&gt;
   &lt;/tuv&gt;
   &lt;tuv lang="fi"&gt;
      &lt;seg&gt;Käyttäjätunnus&lt;/seg&gt;
   &lt;/tuv&gt;
   &lt;tuv lang="se"&gt;
      &lt;seg&gt;Användarnamn&lt;/seg&gt;
   &lt;/tuv&gt;
&lt;/tu&gt;}}} 

				In this translation unit, we've translated the generic string "username" into three different languages, English, Finnish 
				and Swedish. Often our messages need to be dynamic, in other words, we want to change some of the content of the 
				translation depending on some variable in the application. A common example could be a welcoming message which is 
				shown after a user is logged in.
				
				{{{&lt;tu tuid="WELCOME_MESSAGE"&gt;
   &lt;tuv lang="en"&gt;
      &lt;seg&gt;Welcome {0}, your last login was {1}&lt;/seg&gt;
   &lt;/tuv&gt;
   &lt;tuv lang="fi"&gt;
      &lt;seg&gt;Tervetuloa {0}, edellinen kirjautumisesi oli {1}&lt;/seg&gt;
   &lt;/tuv&gt;
   &lt;tuv lang="se"&gt;
      &lt;seg&gt;Välkommen {0}, din senaste inloggning var {1}&lt;/seg&gt;
   &lt;/tuv&gt;
&lt;/tu&gt;}}} 

				This generic message contains two parameters which are identified by the a number between curly brackets. These parameters 
				will be replaced with the actual values when the user fetches the translated message from the servlet. 
				</seg>
			</tuv>
		</tu>
		<tu tuid="translations file">
			<tuv lang="en">
				<seg>The translations file</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages text">
			<tuv lang="en">
				<seg>=Getting a translated message=
				This page's purpose is to show you how to use the internationalization module in your application. Once
				you've created your translations file and you've configured the internationalization module in your application, 
				you are all set to start using the i18n module.
				
				There are two ways of getting a translation message, either directly via the {{{InternationalizationServlet}}} or then
				through the wrapper method in the {{{Lang}}} class. I'll start by showing your how to get a message using the servlet.
				The servlet has a method called {{{getMessage()}}} which takes three parameters. The first parameter is the language
				for which you wish to have the translation message, the second parameter is the translation unit's identifier (tuid) 
				and the final and third parameter is an array of parameters used in the translation message. For this example, we
				will use the following translation file:				
				</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages text2">
			<tuv lang="en">
				<seg>The file contains two translation messages, one is a single word message and the second is a phrase containing
				a parameter. Both messages have translations in both English and German. Now let's create a textfield which has the 
				caption "Username". 		
				</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages text3">
			<tuv lang="en">
				<seg>As you can see from the example, the first parameter is "en" in the call to {{{getMessage()}}}. This means
				that you will always get the English translation for the given tuid. To get the German translation for the same
				message, you would need to change the first parameter to "de". You most likely do not want to hard code the
				first parameter (unless you only have one language in your application, maybe not even then), but instead use
				a variable whose value changes depending on user input or on some configuration settings.
				
				NOTE! Let's assume you have defined the first parameters as a string in the following fasion: 
{{{
String lang = "en"; 
... 
tf.setCaption(InternationalizationServlet.getMessage(lang, "username"));
}}}
				If you change the value of the lang	parameter do "de", it will **not** automatically change the textfield's caption, 
				but instead, you will have to call the textfield's {{{setCaption()}}} method with the new translation message.
				
				Sometimes you want to have parametrized messages, for example, you want to show the user a greeting message
				containing his name, when he logs in to your application. You can define placeholders for parameters in the 
				translation message by using curly brackets and the index number of the parameter. For example, the
				message "Welcome, {0}" contains one parameter which is given as the last argument when calling the 
				{{{getMessage()}}}.		
				</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages text4">
			<tuv lang="en">
				<seg>As seen in the [[#i18n-config|configuring the i18n module]], you can define a default locale for your 
				i18n module. Once you've set the default locale, you can use {{{Lang}}} class's wrapper for the {{{getMessage()}}}
				method. When using the wrapper method, you do not need to specify the language to be used, but instead the
				translation message is fetched for the default language.
				</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages">
			<tuv lang="en">
				<seg>Getting a translated message</seg>
			</tuv>
		</tu>
		<tu tuid="example translation xml">
			<tuv lang="en">
				<seg>Example translations file</seg>
			</tuv>
		</tu>
		<tu tuid="field translations text">
			<tuv lang="en">
				<seg>=Translation messages and forms=
				Combining Vaadin forms with BeanItems and translated messages can be a bit tricky. If you create a BeanItem
				from your POJO and set it as the datasource to a form, the form will automatically create fields to the form
				based on your POJO's field types. The form will use the name of the field's name as the caption for the
				form field it is creating. In many cases, this will suffice and if you need to change the form field type or
				the caption of a form field, you need to create a FormFieldFactory and manipulate the fields manually.
				
				If your application is translated into multiple language, your only option would be to create a FormFieldFactory
				in which you manually set the caption for each and every field based on the chosen locale. AppFoundation
				provides you with means for dynamically creating forms with localized field captions.
				
				==Step 1: Define translations for your fields==
				The first step is to translate your POJOs' fields. As an example, we'll use a class named Customer and assume
				it has three fields: name, e-mail address and phone number. To define the translationed captions for each field
				we'll need to annotate each field with the {{{@FieldTranslation}}} annotation. The annotation has a the 
				argument "tuid" which we need to fill. This argument's value is the translation unit's identifier for the
				field name, the actual translation message for the field name should use the same identifier in the translation
				file.				
				</seg>
			</tuv>
		</tu>
		<tu tuid="field translations text2">
			<tuv lang="en">
				<seg>==Step 2: Creating the form==
				The i18n module contains its own extension for the default Vaadin form. The form is called {{{I18nForm}}} and
				it automatically looks for the FieldTranslation annotation in your POJO, if an annotation with a tuid is found,
				then the translation message is used as the caption for the field. The {{{I18nForm}}}'s constructor requires
				you to provide your POJO's class as its only argument, in our case, we would initialize the class by calling
				{{{I18nForm form = new I18nForm(Customer.class);}}}. If you need to use a custom FormFieldFactory, just 
				extend the {{{I18nFormFieldFactory}}} and make any necessary modifications. If you create the field instance
				in your own field factory, then you will have to set the caption for it manually, to get the caption for
				the field using the FieldTranslation annotation, just call 
				{{{TranslationUtil.getFieldTranslation(pojoClass, (String) propertyId)}}} where the first parameter is your
				POJO's class (pojoClass is a protected field in the {{{I18nFormFieldFactory}}}) and the property name
				which you are processing.
				
				Below you can see an example using this technique. By selecting another language from the select, the 
				application sets a new default language for the {{{Lang}}} class after which the the bean item is reset
				as the form's item data source (to trigger a repaint in order to get the new captions).				
				</seg>
			</tuv>
		</tu>
		<tu tuid="field translations">
			<tuv lang="en">
				<seg>Translations in forms</seg>
			</tuv>
		</tu>
		<tu tuid="customer pojo">
			<tuv lang="en">
				<seg>Example: Customer POJO</seg>
			</tuv>
		</tu>
		<tu tuid="customer pojo translations">
			<tuv lang="en">
				<seg>Customer POJO translation file</seg>
			</tuv>
		</tu>
		<tu tuid="configure i18n text">
			<tuv lang="en">
				<seg>=Configuring the i18n module=
				You'll only need to do three things to get the module up and running. The first task is to register the servlet 
				in our web.xml -file. It can be done by adding the following rows to your web.xml -file: 
				
				{{{&lt;servlet&gt;
      &lt;servlet-name&gt;I18NServlet&lt;/servlet-name&gt;
      &lt;servlet-class&gt;org.vaadin.appfoundation.i18n.InternationalizationServlet&lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
      &lt;servlet-name&gt;I18NServlet&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/I18NServlet/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;}}}

				The second task is to load your translations files' content to the InternationalizationServlet. This can be done by 
				calling the loadTranslations()  method in the servlet. The method takes as input a File object. A good practice 
				is to call this method in the application's context listener (see example below).

				Finally, you'll need to initialize the Lang class for your application instance (see second source code example). 
				</seg>
			</tuv>
		</tu>
		<tu tuid="configure i18n">
			<tuv lang="en">
				<seg>Configuring the i18n module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring persistence module">
			<tuv lang="en">
				<seg>Configurint the persistence module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring persistence module text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="creating pojos text">
			<tuv lang="en">
				<seg>creating pojos text</seg>
			</tuv>
		</tu>
		<tu tuid="creating pojos">
			<tuv lang="en">
				<seg>Creating POJOs</seg>
			</tuv>
		</tu>
		<tu tuid="persistence module intro">
			<tuv lang="en">
				<seg>Introduction to persistence module</seg>
			</tuv>
		</tu>
		<tu tuid="persistence module intro text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="facade factory exmaple text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="facade factory exmaple">
			<tuv lang="en">
				<seg>Using the FacadeFactory</seg>
			</tuv>
		</tu>
		<tu tuid="fetching data text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="fetching data">
			<tuv lang="en">
				<seg>Fetching data</seg>
			</tuv>
		</tu>
		<tu tuid="removing data text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="removing data">
			<tuv lang="en">
				<seg>Removing data</seg>
			</tuv>
		</tu>
		<tu tuid="storing data text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="storing data">
			<tuv lang="en">
				<seg>Storing data</seg>
			</tuv>
		</tu>
		<tu tuid="persistence">
			<tuv lang="en">
				<seg>Persistence</seg>
			</tuv>
		</tu>
		<tu tuid="views text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="views">
			<tuv lang="en">
				<seg>Views</seg>
			</tuv>
		</tu>
		<tu tuid="view module intro text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view module intro">
			<tuv lang="en">
				<seg>Introduction to the View moduel</seg>
			</tuv>
		</tu>
		<tu tuid="view handler example text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view handler example">
			<tuv lang="en">
				<seg>The ViewHandler</seg>
			</tuv>
		</tu>
		<tu tuid="view factories text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view factories">
			<tuv lang="en">
				<seg>View factories</seg>
			</tuv>
		</tu>
		<tu tuid="view events text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view events">
			<tuv lang="en">
				<seg>View events</seg>
			</tuv>
		</tu>
		<tu tuid="view container text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view container">
			<tuv lang="en">
				<seg>View containers</seg>
			</tuv>
		</tu>
		<tu tuid="configuring view module text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="configuring view module">
			<tuv lang="en">
				<seg>Configuring the View module</seg>
			</tuv>
		</tu>
		<tu tuid="view module">
			<tuv lang="en">
				<seg>View</seg>
			</tuv>
		</tu>
		<tu tuid="main view">
			<tuv lang="en">
				<seg>=Application Foundation=</seg>
			</tuv>
		</tu>
		<tu tuid="application foundation">
			<tuv lang="en">
				<seg>Application Foundation</seg>
			</tuv>
		</tu>
		<tu tuid="name">
			<tuv lang="en">
				<seg>Name</seg>
			</tuv>
			<tuv lang="de">
				<seg>Name</seg>
			</tuv>
		</tu>
		<tu tuid="email">
			<tuv lang="en">
				<seg>E-mail address</seg>
			</tuv>
			<tuv lang="de">
				<seg>E-Mail-Adresse</seg>
			</tuv>
		</tu>
		<tu tuid="phone">
			<tuv lang="en">
				<seg>Phone number</seg>
			</tuv>
			<tuv lang="de">
				<seg>Telefonnummer</seg>
			</tuv>
		</tu>
		<tu tuid="en language">
			<tuv lang="en">
				<seg>English - Englisch</seg>
			</tuv>
		</tu>
		<tu tuid="de language">
			<tuv lang="en">
				<seg>German - Deutsch</seg>
			</tuv>
		</tu>
	</body>
</tmx>