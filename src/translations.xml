<tmx version="1.4">
	<body>
		<tu tuid="auth module">
			<tuv lang="en">
				<seg>Authentication</seg>
			</tuv>
		</tu>
		<tu tuid="auth intro">
			<tuv lang="en">
				<seg>Introduction to the Authentication module</seg>
			</tuv>
		</tu>
		<tu tuid="auth a user">
			<tuv lang="en">
				<seg>Authenticating users</seg>
			</tuv>
		</tu>
		<tu tuid="intro text to auth module">
			<tuv lang="en">
				<seg>=Introduction to the Authentication module=
				Unlike the module name suggests, this module is not just about authentication. Additionally to authentication, 
				the authentication module provides your application user session management, password handling utility methods and
				features for handling user accounts.
				
				==Security==
				The authentication module has several inbuilt security features, such as
				
				 * User's passwords are always stored in hashed format
				 * Protection against brute force attacks by locking accounts after a number of failed login attempts
				 * Protection against brute force attacks by logging out the user if the current password is incorrect too many times 
				 in a row when change the user's password
				 
				 ==Dependencies==
				 This module depends on the [[#persistence|persistence module]].
				</seg>
			</tuv>
		</tu>
		<tu tuid="text for auth a user">
			<tuv lang="en">
				<seg>=Authenticating users=
				The authentication module provides a simple interface for authenticating users. Authenticating a user can be done
				with one simple method call. The authentication is simply done by calling the static 
				{{{AuthenticationUtil.authenticate()}}} method. The method takes as input two string parameters, a username and
				a password. If a user is found with the given username and password, then the user's {{{User}}} object is
				returned. If there no user exists with the given username **or** if the password is incorrect, then a 
				{{{InvalidCredentialsException}}} is thrown. 
				
				The {{{InvalidCredentialsException}}} will **not** tell you whether it was the username that was not found or
				if it was the password that was incorrect. This is by design, just to make sure that your application will
				not accidentally become vulnerable to account enumeration attacks.
				
				The {{{authenticate()}}} method can also throw an {{{AccountLockedException}}}. This exception is thrown if the
				user account has been locked. When an account is locked, the Authentication module forbids a user from logging
				in with that specific user, even if the provided credentials would be correct. An account can become locked
				if a user attempts to log in with a wrong password too many times in a row.
				
				Below is shown an example of how to implement a login screen which uses the {{{authenticate()}}} method for
				authenticating the user. The example locks the user account after three failed login attempts (incorrect passwords).
				The example is reseted when this view is reopened.
				</seg>
			</tuv>
		</tu>
		<tu tuid="show code">
			<tuv lang="en">
				<seg>Show code example</seg>
			</tuv>
		</tu>
		<tu tuid="configuring auth">
			<tuv lang="en">
				<seg>Configuring the module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring auth text">
			<tuv lang="en">
				<seg>=Configuring the authentication module=
				==Prerequisites==
				The authentication module depends on the [[#persistence|persistence module]] so make sure you have it
				configured as well. Also, make sure you have the org.vaadin.appfoundation.authentication.data.User class defined
				in your persistence.xml file according to the persistence module's descriptions.
				
				==Setting up the authentication module==
				It is really easy to get started with the authentication module. The only thing that needs to be done, is to
				initialize [[sessionhandler|SessionHandler]] class. It is encouraged that the initialization of the 
				{{{SessionHandler}}} is done in the application's {{{init()}}} method. See the code example of the initialization
				process at the end of this page.
				
				The authentication module provides you with a variation of different configuration parameters which can be defined. 
				All configuration parameters are defined using java system properties. The following properties are available for
				the authentication module: 
				
				===Salt value for password hash===
				Before any passwords are stored in the database, they are encrypted with a one-way algorithm (a hash). The salt value
				is a random string which is concatenated with a user's password before the password is hashed. The resulting hash 
				value will be harder to break with brute force attacks compared to a hash without a salt value. 
				
				Note that once the salt value has been defined, it cannot be changed (- technically, it can be changed, but then it 
				would invalidate all existing passwords). It is recommended that you choose a salt value and stick to it. A good
				place to define the salt value is in your application's ContextListener (see example at the end of the page).
				
				The system property key for the password salt is authentication.password.salt 
				
				===Minimum length for a password===
				You can define a minimum length users' passwords. The authentication module will not allow the user to pick a password
				which is shorter than the defined minimum length.
				
				The system property key for the minimum password length is authentication.password.validation.length and the value
				should be given as an integer.
				
				===Password policies===
				The authentication module provides you with a set of predefined password policies which can be enabled or disabled.
				You can define that the password must contain
				
				* Lower case letters (a-z)
				* Upper case letters (A-Z)
				* Numbers (0-9)
				* Special characters (any character which is none of the above)
				
				The system property keys for the policies are as follows:
				
				* authentication.password.validation.lowerCaseRequired
				* authentication.password.validation.upperCaseRequired
				* authentication.password.validation.numericRequired
				* authentication.password.validation.specialCharacterRequired
				
				Each of the properties take a boolean as their value. True means that the policy is being applied on the passwords
				and any passwords which do not fulfill the requirements will not be accepted by the authentication module. The
				policy will be ignored if the property has a value of false.
				
				===Brute-force protection===
				AppFoundation has inbuilt protection against brute-force attacks. This is accomplished by locking an account after
				a number of failed login attempts. By default, five successive failed login attempts are required for the account
				to be locked. You can change the limit with the authentication.maxFailedLoginAttempts parameter. Note that the 
				parameter defines how many failed login attempts are allow, so if you set the value three, it means that the
				account will be locked after the *fourth* successive failed login attempt.
				</seg>
			</tuv>
		</tu>
		<tu tuid="example for auth context listener">
			<tuv lang="en">
				<seg>Example code for the ContextListener used for defining authentication module's settings</seg>
			</tuv>
		</tu>
		<tu tuid="auth module init example">
			<tuv lang="en">
				<seg>Example for initializing the SessionHandler</seg>
			</tuv>
		</tu>
		<tu tuid="getting user instance caption">
			<tuv lang="en">
				<seg>Get active user object</seg>
			</tuv>
		</tu>
		<tu tuid="getting user instance">
			<tuv lang="en">
				<seg>=Getting the user instance for the logged in user=
				An application will occasionally need to know which user is currently logged in for the active application instance.
				Once your application has authenticated the user using the {{{AuthenticationUtil.authenticate()}}} method, the active 
				{{{User}}} object will be stored in the application instance. The {{{SessionHandler}}} class provides a simple and 
				static way to fetch the logged in user's {{{User}}} object. This is simply done by calling the {{{SessionHandler.get()}}}
				method. If the user is not logged in, then null will be returned.
				</seg>
			</tuv>
		</tu>
		<tu tuid="logging out a user caption">
			<tuv lang="en">
				<seg>Logout process and its events</seg>
			</tuv>
		</tu>
		<tu tuid="logging out a user">
			<tuv lang="en">
				<seg>=Logging out a user and logout events=
				If your applications allows users to log in, then your application probably allows your users to log out as well. 
				Logging out a user means that the reference between a {{{User}}} object and an application instance is removed. Thus,
				the application no longer is aware of the previously inlogged user.
				
				You can log out a user anywhere in your application, simply by calling {{{SessionHandler.logout()}}}. This will
				remove the {{{User}}} object reference and dispatch a logout event to any possible listeners. The logout method itself
				will not affect your application's state in any way. Your application most likely will want to do some actions when
				the user logs out, for example, remove all views visible and show a login screen to the user. This problem can be
				solved by registering your application as a LogoutEventListener. Once an event has been dispatched, you will know
				that the user has logged out and you can perform any actions necessary. See code example below.
				</seg>
			</tuv>
		</tu>
		<tu tuid="logout example">
			<tuv lang="en">
				<seg>Example of logging out a user</seg>
			</tuv>
		</tu>
		<tu tuid="logout event example">
			<tuv lang="en">
				<seg>Example of logout events</seg>
			</tuv>
		</tu>
		<tu tuid="change password">
			<tuv lang="en">
				<seg>Changing user passwords</seg>
			</tuv>
		</tu>
		<tu tuid="register user">
			<tuv lang="en">
				<seg>Registering new users</seg>
			</tuv>
		</tu>
		<tu tuid="fetching users">
			<tuv lang="en">
				<seg>Fetching User object</seg>
			</tuv>
		</tu>
		<tu tuid="storing users">
			<tuv lang="en">
				<seg>Storing User objects</seg>
			</tuv>
		</tu>
		<tu tuid="password util">
			<tuv lang="en">
				<seg>Password utility methods</seg>
			</tuv>
		</tu>
		<tu tuid="change user password">
			<tuv lang="en">
				<seg>=Changing the user's password=
				The authentication module provides with a simple method for changing a user's password - just call
				{{{UserUtil.changePassword()}}}. The method takes four input parameters: the first parameter is the
				{{{User}}} object of the user whose password we are about to change. The second parameter is the
				current password of the user, the third and fourth parameters is the new password and a verification
				for the new password.
				
				Using this utility method will provide you with the following features
				* Verification of old password
				* Verification of new password for typing errors
				* Validation that new password fulfills set requirements such as length, password policies (see 
				[[#auth-config|configuring the authentication module]] for more details)
				* Protection against brute-force attacks (user is automatically logged out if the current password
				is incorrect too many times in a row)
				
				This utility method is designed to be used by the currently inlogged user for him/her to change
				his/her password.  
				
				The example below shows an example of a "change password" form. The current password is "demo123".
			 	The current password's value is reseted back to this value each time you open up this view.
				</seg>
			</tuv>
		</tu>
		<tu tuid="fetching a user object">
			<tuv lang="en">
				<seg>=Fetching a User object=
				The {{{UserUtil}}} class provides with a simple method for fetching an instance of the {{{User}}}
				object with a given ID. This method is simply a wrapper for facade's {{{find()}}} method.
				</seg>
			</tuv>
		</tu>
		<tu tuid="password utility methods">
			<tuv lang="en">
				<seg>=Password utility methods=
				Application Foundation has a utility class for handling passwords. Each of the methods provided by the
				utility class are described below.</seg>
			</tuv>
		</tu>
		<tu tuid="generateHashedPassword">
			<tuv lang="en">
				<seg>==Password hashing==
				Application Foundation never stores passwords in a clear text format in the database. All passwords are
				encrypted with a one-way algorithm (hashed) before they are stored. Before the password is hashed, a
				salt value is concatenated to the password in order to avoid rainbow attacks. The password utility class 
				provides a method for generating correctly hashed passwords. For example, if your user has forgotten his
				password and you need to create him a new one, you will need to create him a new password, hash the
				password and store it in the user object. Code example below shows this process and the usage of
				the password hashing method.				
				</seg>
			</tuv>
		</tu>
		<tu tuid="getMinPasswordLength">
			<tuv lang="en">
				<seg>==Get the minimum length for passwords==
				PasswordUtil's {{{getMinPasswordLength()}}} method returns the currently active minimum length set for
				passwords.
				</seg>
			</tuv>
		</tu>
		<tu tuid="password validators">
			<tuv lang="en">
				<seg>==Password validators==
				As described in the configuration of the authentication module, you can define password policies for
				user passwords. In some cases, you might want to give the user fast feedback on whether the given
				password fullfills the set requirements. The {{{PasswordUtil.getValidators()}}} method returns you
				normal Vaadin validator objects which you can attach to a password field.
				
				The example below show you how to apply the validators to a text field. The example has only a validator
				for a minimum password length. Note that the validator will get triggered after you remove focus from
				the TextField.
				</seg>
			</tuv>
		</tu>
		<tu tuid="password validity">
			<tuv lang="en">
				<seg>==Checing for password validity==
				The {{{PasswordUtil}}} contains a method for checking if a password is valid, in other words, that it
				fulfills all the requirements set in the configuration. To check the validity of a password, simply
				call {{{PasswordUtil.isValid()}}} and give as the parameter the value you want to check</seg>
			</tuv>
		</tu>
		<tu tuid="TODO">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="registering a user">
			<tuv lang="en">
				<seg>=Registering new users=
				The {{{UserUtil}}} contains a method for creating new User objects. The method is called 
				{{{registerUser}}} and as the name suggests, it is designed to be used for user registration
				forms. 
				
				The method takes three input paramters, a username and a password with its respective 
				verification. Using this utility method will provide you with the following features
				* Verification of password for typing errors
				* Validation that new password fulfills set requirements such as length, password policies (see 
				[[#auth-config|configuring the authentication module]] for more details)
				* Verifies username's availability to avoid duplicates
				* Verifies that the username meets the set length requirements
				
				The example below simulates a registration form for new users. The form simulates a situation 
				where the username "demo" is reserved. Note that in this example application, the registered
				users are not actually stored, so the credentials cannot be used in other examples.
				</seg>
			</tuv>
		</tu>
		<tu tuid="storing a user object">
			<tuv lang="en">
				<seg>=Storing a User object=
				The {{{UserUtil}}} class provides with a simple method for storing an instance of the {{{User}}}
				objec. This method is simply a wrapper for facade's {{{store()}}} method.
				</seg>
			</tuv>
		</tu>
		<tu tuid="authorization">
			<tuv lang="en">
				<seg>Authorization</seg>
			</tuv>
		</tu>
		<tu tuid="intro to authorization">
			<tuv lang="en">
				<seg>Introduction to Authorization module</seg>
			</tuv>
		</tu>
		<tu tuid="intro to authorization text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="resources">
			<tuv lang="en">
				<seg>Resources</seg>
			</tuv>
		</tu>
		<tu tuid="resources text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="roles">
			<tuv lang="en">
				<seg>Roles</seg>
			</tuv>
		</tu>
		<tu tuid="roles text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="permission managers">
			<tuv lang="en">
				<seg>Permission managers</seg>
			</tuv>
		</tu>
		<tu tuid="permission managers text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="jpapm">
			<tuv lang="en">
				<seg>Persisting permission manager</seg>
			</tuv>
		</tu>
		<tu tuid="jpapm text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="mempm">
			<tuv lang="en">
				<seg>In-memory permission manager</seg>
			</tuv>
		</tu>
		<tu tuid="mempm text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="init authorization">
			<tuv lang="en">
				<seg>Initializing the module</seg>
			</tuv>
		</tu>
		<tu tuid="init authorization text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="granting access">
			<tuv lang="en">
				<seg>Granting access</seg>
			</tuv>
		</tu>
		<tu tuid="granting access text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="denying access">
			<tuv lang="en">
				<seg>Denying access</seg>
			</tuv>
		</tu>
		<tu tuid="denying access text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="checking for access rights">
			<tuv lang="en">
				<seg>Checking for access rights</seg>
			</tuv>
		</tu>
		<tu tuid="checking for access rights text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="removing permissions text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="removing permissions">
			<tuv lang="en">
				<seg>Removing permissions</seg>
			</tuv>
		</tu>
		<tu tuid="i18n">
			<tuv lang="en">
				<seg>Internationalization (i18n)</seg>
			</tuv>
		</tu>
		<tu tuid="i18n intro text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="i18n intro">
			<tuv lang="en">
				<seg>Introduction to the i18n module</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="updating translations file">
			<tuv lang="en">
				<seg>Updating the translations file</seg>
			</tuv>
		</tu>
		<tu tuid="translations file text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="translations file">
			<tuv lang="en">
				<seg>The translations file</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="getting messages">
			<tuv lang="en">
				<seg>Getting a translated message</seg>
			</tuv>
		</tu>
		<tu tuid="field translations text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="field translations">
			<tuv lang="en">
				<seg>Translations in forms</seg>
			</tuv>
		</tu>
		<tu tuid="configure i18n text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="configure i18n">
			<tuv lang="en">
				<seg>Configurint the i18n module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring persistence module">
			<tuv lang="en">
				<seg>Configurint the persistence module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring persistence module text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="creating pojos text">
			<tuv lang="en">
				<seg>creating pojos text</seg>
			</tuv>
		</tu>
		<tu tuid="creating pojos">
			<tuv lang="en">
				<seg>Creating POJOs</seg>
			</tuv>
		</tu>
		<tu tuid="persistence module intro">
			<tuv lang="en">
				<seg>Introduction to persistence module</seg>
			</tuv>
		</tu>
		<tu tuid="persistence module intro text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="facade factory exmaple text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="facade factory exmaple">
			<tuv lang="en">
				<seg>Using the FacadeFactory</seg>
			</tuv>
		</tu>
		<tu tuid="fetching data text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="fetching data">
			<tuv lang="en">
				<seg>Fetching data</seg>
			</tuv>
		</tu>
		<tu tuid="removing data text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="removing data">
			<tuv lang="en">
				<seg>Removing data</seg>
			</tuv>
		</tu>
		<tu tuid="storing data text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="storing data">
			<tuv lang="en">
				<seg>Storing data</seg>
			</tuv>
		</tu>
		<tu tuid="persistence">
			<tuv lang="en">
				<seg>Persistence</seg>
			</tuv>
		</tu>
		<tu tuid="views text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="views">
			<tuv lang="en">
				<seg>Views</seg>
			</tuv>
		</tu>
		<tu tuid="view module intro text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view module intro">
			<tuv lang="en">
				<seg>Introduction to the View moduel</seg>
			</tuv>
		</tu>
		<tu tuid="view handler example text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view handler example">
			<tuv lang="en">
				<seg>The ViewHandler</seg>
			</tuv>
		</tu>
		<tu tuid="view factories text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view factories">
			<tuv lang="en">
				<seg>View factories</seg>
			</tuv>
		</tu>
		<tu tuid="view events text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view events">
			<tuv lang="en">
				<seg>View events</seg>
			</tuv>
		</tu>
		<tu tuid="view container text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="view container">
			<tuv lang="en">
				<seg>View containers</seg>
			</tuv>
		</tu>
		<tu tuid="configuring view module text">
			<tuv lang="en">
				<seg>TODO</seg>
			</tuv>
		</tu>
		<tu tuid="configuring view module">
			<tuv lang="en">
				<seg>Configuring the View module</seg>
			</tuv>
		</tu>
		<tu tuid="view module">
			<tuv lang="en">
				<seg>View</seg>
			</tuv>
		</tu>
		<tu tuid="main view">
			<tuv lang="en">
				<seg>=Application Foundation=</seg>
			</tuv>
		</tu>
		<tu tuid="application foundation">
			<tuv lang="en">
				<seg>Application Foundation</seg>
			</tuv>
		</tu>
	</body>
</tmx>