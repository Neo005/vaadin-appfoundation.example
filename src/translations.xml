<tmx version="1.4">
	<body>
		<tu tuid="auth module">
			<tuv lang="en">
				<seg>Authentication</seg>
			</tuv>
		</tu>
		<tu tuid="auth intro">
			<tuv lang="en">
				<seg>Introduction to the Authentication module</seg>
			</tuv>
		</tu>
		<tu tuid="auth a user">
			<tuv lang="en">
				<seg>Authenticating users</seg>
			</tuv>
		</tu>
		<tu tuid="intro text to auth module">
			<tuv lang="en">
				<seg>=Introduction to the Authentication module=
				Unlike the module name suggests, this module is not just about authentication. Additionally to authentication, 
				the authentication module provides your application user session management, password handling utility methods and
				features for handling user accounts.
				
				==Security==
				The authentication module has several inbuilt security features, such as
				
				 * User's passwords are always stored in hashed format
				 * Protection against brute force attacks by locking accounts after a number of failed login attempts
				 * Protection against brute force attacks by logging out the user if the current password is incorrect too many times 
				 in a row when change the user's password
				 
				 ==Dependencies==
				 This module depends on the [[#persistence|persistence module]].
				</seg>
			</tuv>
		</tu>
		<tu tuid="text for auth a user">
			<tuv lang="en">
				<seg>=Authenticating users=
				The authentication module provides a simple interface for authenticating users. Authenticating a user can be done
				with one simple method call. The authentication is simply done by calling the static 
				{{{AuthenticationUtil.authenticate()}}} method. The method takes as input two string parameters, a username and
				a password. If a user is found with the given username and password, then the user's {{{User}}} object is
				returned. If there no user exists with the given username **or** if the password is incorrect, then a 
				{{{InvalidCredentialsException}}} is thrown. 
				
				The {{{InvalidCredentialsException}}} will **not** tell you whether it was the username that was not found or
				if it was the password that was incorrect. This is by design, just to make sure that your application will
				not accidentally become vulnerable to account enumeration attacks.
				
				The {{{authenticate()}}} method can also throw an {{{AccountLockedException}}}. This exception is thrown if the
				user account has been locked. When an account is locked, the Authentication module forbids a user from logging
				in with that specific user, even if the provided credentials would be correct. An account can become locked
				if a user attempts to log in with a wrong password too many times in a row.
				
				Below is shown an example of how to implement a login screen which uses the {{{authenticate()}}} method for
				authenticating the user. The example locks the user account after three failed login attempts (incorrect passwords).
				The example is reseted when this view is reopened.
				</seg>
			</tuv>
		</tu>
		<tu tuid="show code">
			<tuv lang="en">
				<seg>Show code for example</seg>
			</tuv>
		</tu>
		<tu tuid="configuring auth">
			<tuv lang="en">
				<seg>Configuring the module</seg>
			</tuv>
		</tu>
		<tu tuid="configuring auth text">
			<tuv lang="en">
				<seg>=Configuring the authentication module=
				==Prerequisites==
				The authentication module depends on the [[#persistence|persistence module]] so make sure you have it
				configured as well. Also, make sure you have the org.vaadin.appfoundation.authentication.data.User class defined
				in your persistence.xml file according to the persistence module's descriptions.
				
				==Setting up the authentication module==
				It is really easy to get started with the authentication module. The only thing that needs to be done, is to
				initialize [[sessionhandler|SessionHandler]] class. It is encouraged that the initialization of the 
				{{{SessionHandler}}} is done in the application's {{{init()}}} method. Below is a code example of the initialization
				process.
				
				The authentication module provides you with a variation of different configuration parameters which can be defined. 
				All configuration parameters are defined using java system properties. The following properties are available for
				the authentication module: 
				
				===Salt value for password hash===
				Before any passwords are stored in the database, they are encrypted with a one-way algorithm (a hash). The salt value
				is a random string which is concatenated with a user's password before the password is hashed. The resulting hash 
				value will be harder to break with brute force attacks compared to a hash without a salt value. 
				
				Note that once the salt value has been defined, it cannot be changed (- technically, it can be changed, but then it 
				would invalidate all existing passwords). It is recommended that you choose a salt value and stick to it. A good
				place to define the salt value is in your application's ContextListener (see example).
				
				The system property key for the password salt is authentication.password.salt 
				
				===Minimum length for a password===
				You can define a minimum length users' passwords. The authentication module will not allow the user to pick a password
				which is shorter than the defined minimum length.
				
				The system property key for the minimum password length is authentication.password.validation.length and the value
				should be given as an integer.
				
				===Password policies===
				The authentication module provides you with a set of predefined password policies which can be enabled or disabled.
				You can define that the password must contain
				
				* Lower case letters (a-z)
				* Upper case letters (A-Z)
				* Numbers (0-9)
				* Special characters (any character which is none of the above)
				
				The system property keys for the policies are as follows:
				
				* authentication.password.validation.lowerCaseRequired
				* authentication.password.validation.upperCaseRequired
				* authentication.password.validation.numericRequired
				* authentication.password.validation.specialCharacterRequired
				
				Each of the properties take a boolean as their value. True means that the policy is being applied on the passwords
				and any passwords which do not fulfill the requirements will not be accepted by the authentication module. The
				policy will be ignored if the property has a value of false.
				</seg>
			</tuv>
		</tu>
	</body>
</tmx>